openapi: 3.0.1
info:
  title: Tetris
  version: 1.0.0
servers:
- url: /api/v1
paths:
  /healthcheck:
    get:
      tags:
      - healthcheck
      summary: Healthcheck should return OK
      operationId: web.controllers.healthcheck.healthcheck
      responses:
        200:
          description: Application is running
          content:
            application/json:
              schema:
                type: string
  /projectsInWork:
    get:
      tags:
      - projects
      summary: get all the projects that are in work
      operationId: web.controllers.projects.get_projects_undone
      responses:
        200:
          description: projects in work fetched
          content:
            application/json:
              schema:
                type: string
  
  /doneProjects:
    get:
      tags:
      - projects
      summary: get all the projects that are in work
      operationId: web.controllers.projects.get_projects_done
      responses:
        200:
          description: projects in work fetched
          content:
            application/json:
              schema:
                type: string

  /infos/all:
    get:  
      tags:
        - infos
      summary: get all the information necessary for the index
      operationId: web.controllers.infos.get_all_infos
      responses:
        200:
          description: all informations from the db fetched
          content:
            application/json:
              schema:
                type: string
                
  /infos/ueberUns:
    get:
      tags:
      - infos
      summary: get the angebot infos
      operationId: web.controllers.infos.get_angebot
      responses:
        200:
          description: angebot fetched
          content:
            application/json:
              schema:
                type: string
    put:
      tags:
      - infos
      summary: change the über uns Text
      operationId: web.controllers.infos.update_angebot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ueberUns'
              x-body-name: info
        required: true
      responses:
        200:
          description: Successfully updated text
          content: {}
        404:
          description: Text does not exist
          content: {}
      x-codegen-request-body-name: info
      security:
      - jwt: []

  /infos/gruendung:
    get:
      tags:
      - infos
      summary: get the infos about the gründung of Immosolution
      operationId: web.controllers.infos.get_gruendung
      responses:
        200:
          description: angebot fetched
          content:
            application/json:
              schema:
                type: string
  /infos/projekte:
    get:
      tags:
      - infos
      summary: get the infos about the referenzprojekte from Immosolution
      operationId: web.controllers.infos.get_referenzprojekte
      responses:
        200:
          description: referenzprojekte fetched
          content:
            application/json:
              schema:
                type: string
  /infos/team:
    get:
      tags:
      - infos
      summary: get the infos about the mitarbeitern from Immosolution
      operationId: web.controllers.infos.get_mitarbeiter
      responses:
        200:
          description: mitarbeiter fetched
          content:
            application/json:
              schema:
                type: string
  /infos/privatkunden:
    get:
      tags:
      - infos
      summary: get the infos about the privatkunden from Immosolution
      operationId: web.controllers.infos.get_privatkunden
      responses:
        200:
          description: privatkunden fetched
          content:
            application/json:
              schema:
                type: string

  /user/{username}:
    get:
      tags:
      - login
      summary: get the infos of a user, by the username
      operationId: web.controllers.user.get_username_by_name
      parameters:
      - name: username
        in: path
        description: the username of the user
        required: true
        schema:
          type: string
      responses:
        200:
          description: username fetched
          content:
            application/json:
              schema:
                type: string
  
  /login:
    post:
      tags:
      - login
      summary: Return JWT token
      operationId: web.security.jwt.login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
              x-body-name: body
        required: false
      responses:
        200:
          description: JWT token
          content:
            application/json:
              schema:
                type: string
        403:
          description: Unautorized
          content:
            application/json:
              schema:
                type: string
      x-codegen-request-body-name: credentials
  
  /secret:
    get:
      tags:
        - healthcheck
      summary: Return secret string
      operationId: web.security.jwt.get_secret
      responses:
        '200':
          description: secret response
          content:
            'text/plain':
              schema:
                type: string
      security:
      - jwt: []

components:
  securitySchemes:
      jwt:
        type: http
        scheme: bearer
        bearerFormat: JWT
        x-bearerInfoFunc: web.security.jwt.decode_token
        
  schemas:
    LoginCredentials:
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
          description: username
        password:
          type: string
      example:
        username: admin
        password: password

    ueberUns:
      required:
       - UberUnsText
      type: object
      properties:
        UberUnsText: 
          type: string
          description: Über uns Text
      example:
        UberUnsText: Dies ist unser Angebot
