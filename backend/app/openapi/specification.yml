openapi: 3.0.1
info:
  title: Tetris
  version: 1.0.0
servers:
- url: /api/v1
paths:
  /healthcheck:
    get:
      tags:
      - healthcheck
      summary: Healthcheck should return OK
      operationId: web.controllers.healthcheck.healthcheck
      responses:
        200:
          description: Application is running
          content:
            application/json:
              schema:
                type: string

  /infos/all:
    get:  
      tags:
        - infos
      summary: get all the information necessary for the index
      operationId: web.controllers.infos.get_all_infos
      responses:
        200:
          description: all informations from the db fetched
          content:
            application/json:
              schema:
                type: string
                
  /infos/angebot:
    get:
      tags:
      - infos
      summary: get the angebot infos
      operationId: web.controllers.infos.get_angebot
      responses:
        200:
          description: angebot fetched
          content:
            application/json:
              schema:
                type: string
  /infos/gruendung:
    get:
      tags:
      - infos
      summary: get the infos about the gr√ºndung of Immosolution
      operationId: web.controllers.infos.get_gruendung
      responses:
        200:
          description: angebot fetched
          content:
            application/json:
              schema:
                type: string
  /infos/referenzprojekte:
    get:
      tags:
      - infos
      summary: get the infos about the referenzprojekte from Immosolution
      operationId: web.controllers.infos.get_referenzprojekte
      responses:
        200:
          description: referenzprojekte fetched
          content:
            application/json:
              schema:
                type: string
  /infos/mitarbeiter:
    get:
      tags:
      - infos
      summary: get the infos about the mitarbeitern from Immosolution
      operationId: web.controllers.infos.get_mitarbeiter
      responses:
        200:
          description: mitarbeiter fetched
          content:
            application/json:
              schema:
                type: string
  /infos/privatkunden:
    get:
      tags:
      - infos
      summary: get the infos about the privatkunden from Immosolution
      operationId: web.controllers.infos.get_privatkunden
      responses:
        200:
          description: privatkunden fetched
          content:
            application/json:
              schema:
                type: string
  
  /login:
    post:
      tags:
      - login
      summary: Return JWT token
      operationId: web.security.jwt.login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
              x-body-name: body
        required: false
      responses:
        200:
          description: JWT token
          content:
            application/json:
              schema:
                type: string
        403:
          description: Unautorized
          content:
            application/json:
              schema:
                type: string
      x-codegen-request-body-name: credentials
  
  /secret:
    get:
      tags:
        - healthcheck
      summary: Return secret string
      operationId: web.security.jwt.get_secret
      responses:
        '200':
          description: secret response
          content:
            'text/plain':
              schema:
                type: string
      security:
      - jwt: ['secret']

components:
  securitySchemes:
      jwt:
        type: http
        scheme: bearer
        bearerFormat: JWT
        x-bearerInfoFunc: web.security.jwt.decode_token
        
  schemas:
    LoginCredentials:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          description: email
        password:
          type: string
      example:
        username: antonio@molina.com
        password: password